pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '150'))
  }

  parameters {
    string name: 'version',
    defaultValue: 'dev',
    description: 'version to analyze (dev, nightly, nightly-10, sprint, 8.0, 10.0, 11.2, ...)',
    trim: true
  }

  stages {
    stage('analyze') {
      steps {
        script {
          def version = params.version;
          currentBuild.description = "version: ${version}"
          dockerScoutAnalyze(version);
          archiveArtifacts 'report/sarif.json'
          recordIssues qualityGates: [[threshold: 1, type: 'TOTAL']], sourceCodeRetention: 'NEVER', tools: [sarif(pattern: 'report/sarif.json')], filters: [
            // Apache POI: can we update now?
            // excludeType('CVE-2022-26336'),
            // elasticsearch: snakeyamel
            excludeType('CVE-2022-1471'),
            // elasticsearch: Apache http client
            excludeType('CVE-2020-13956'),

            // 10.0: Guava
            // excludeType('CVE-2023-2976'),
            // 10.0: Jersey: information disclosure in local file system
            // excludeType('CVE-2021-28168'),
            // 10.0: Guava
            // excludeType('CVE-2020-8908'),
          ]
        }
      }
    }

    stage('compare') {
      steps {
        script {
          def version = params.version;
          def env = dockerScoutEnvFrom(version);
          dockerScoutCompare(version, env);
        }
      }
    }

    stage('record') {
      steps {
        script {
          def version = params.version;
          def env = dockerScoutEnvFrom(version);
          dockerScoutRecordInEnv(env, version);

          def scoutHref = "https://scout.docker.com/reports/org/axonivy/overview?stream=environment%3A${env}"
          currentBuild.description = "version: ${version} <a href='${scoutHref}'>docker-scout</a>"
        }
      }
    }
  }
}

def dockerScoutAnalyze(String version) {
  withCredentials([usernamePassword(credentialsId: 'docker.io', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
    sh "docker run -t ${dockerLoginAsEnv()} " +
       "${dockerScoutContainer()} cves ${axonivyEngineImageUrl(version)} " +
       "--ignore-base --locations"

    sh "mkdir -p ${env.WORKSPACE}/report"
    sh "docker run -t -v ${env.WORKSPACE}/report/:/report/ ${dockerLoginAsEnv()} " +
        "${dockerScoutContainer()} cves ${axonivyEngineImageUrl(version)} " +
        "--ignore-base --only-fixed --locations --format sarif --output /report/sarif.json"
  }
}

def dockerScoutCompare(String version, String toEnv) {
  withCredentials([usernamePassword(credentialsId: 'docker.io', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
      sh "docker run -t ${dockerLoginAsEnv()} " +
         "${dockerScoutContainer()} compare ${axonivyEngineImageUrl(version)} " + 
         "--exit-on vulnerability,policy --only-package-type maven,npm --to-env ${toEnv} --org axonivy"
    }
  }
}

def dockerScoutRecordInEnv(String env, String version) {
  withCredentials([usernamePassword(credentialsId: 'docker.io-axonivyinfo', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
    sh 'docker run -t -e DOCKER_SCOUT_HUB_USER=$DOCKER_USER -e DOCKER_SCOUT_HUB_PASSWORD=$DOCKER_PASS ' +
       "${dockerScoutContainer()} env ${env} --org axonivy ${axonivyEngineImageUrl(version)}"
  }
}

def dockerLoginAsEnv() {
  return '-e DOCKER_SCOUT_HUB_USER=$DOCKER_USER -e DOCKER_SCOUT_HUB_PASSWORD=$DOCKER_PASS -e DOCKER_SCOUT_REGISTRY_USER=$DOCKER_USER -e DOCKER_SCOUT_REGISTRY_PASSWORD=$DOCKER_PASS'
}

def dockerScoutContainer() {
  return 'docker/scout-cli:1.4.1'
}

def axonivyEngineImageUrl(String version) {
  return 'registry://axonivy/axonivy-engine:' + version
}

def dockerScoutEnvFrom(String version) {
  return version.replace('.0', '').replace('.', '-');
}
