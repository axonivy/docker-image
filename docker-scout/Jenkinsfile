pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '50'))
  }

  parameters {
    string name: 'version',
    defaultValue: 'dev',
    description: 'version to analyze (dev, nightly, nightly-10, sprint, 8.0, 10.0, 11.2, ...)',
    trim: true
  }

  stages {
    stage('analyze') {
      steps {
        script {
          def version = params.version;
          currentBuild.description = "version: ${version}"
          dockerScoutAnalyze(version);
        }
      }
    }

    stage('compare') {
      steps {
        script {
          def version = params.version;
          def env = version.replace('.0', '').replace('.', '-');
          dockerScoutCompare(version, env);
          dockerScoutRecordInEnv(env, version);
          def scoutHref = "https://scout.docker.com/reports/org/axonivy/overview?stream=environment%3A${env}"
          currentBuild.description = "version: ${version} <a href='${scoutHref}'>docker-scout</a>"
        }
      }
    }
  }
}

def dockerScoutAnalyze(String version) {
  withCredentials([usernamePassword(credentialsId: 'docker.io', passwordVariable: 'dockerPass', usernameVariable: 'dockerUser')]) {
    def dockerLogin = dockerLoginAsEnv(dockerUser, dockerPass);
    sh "docker run -t ${dockerLogin} " +
       "docker/scout-cli cves axonivy/axonivy-engine:${version} " +
       "--ignore-base --only-fixed --locations"
  }
}

def dockerScoutCompare(String version, String toEnv) {
  withCredentials([usernamePassword(credentialsId: 'docker.io', passwordVariable: 'dockerPass', usernameVariable: 'dockerUser')]) {
    def dockerLogin = dockerLoginAsEnv(dockerUser, dockerPass);
    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
      sh "docker run -t ${dockerLogin} " +
         "docker/scout-cli compare axonivy/axonivy-engine:${version} " + 
         "--exit-on vulnerability,policy --only-package-type maven,npm --to-env ${toEnv} --org axonivy"
    }
  }
}

def dockerScoutRecordInEnv(String env, String version) {
  withCredentials([usernamePassword(credentialsId: 'docker.io-axonivyinfo', passwordVariable: 'dockerPass', usernameVariable: 'dockerUser')]) {
    sh "docker run -t -e DOCKER_SCOUT_HUB_USER=${dockerUser} -e DOCKER_SCOUT_HUB_PASSWORD=${dockerPass} " +
       "docker/scout-cli env ${env} --org axonivy axonivy/axonivy-engine:${version}"
  }
}

def dockerLoginAsEnv(String dockerUser, String dockerPass) {
  return "-e DOCKER_SCOUT_HUB_USER=${dockerUser} -e DOCKER_SCOUT_HUB_PASSWORD=${dockerPass} -e DOCKER_SCOUT_REGISTRY_USER=${dockerUser} -e DOCKER_SCOUT_REGISTRY_PASSWORD=${dockerPass}"
}
